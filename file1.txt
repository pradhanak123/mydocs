

LOGIN COMMAND:
------------------
Connect-AzureRmAccount OR Login-AzureRmAccount
Select-AzureRmSubscription -SubscriptionName "*************"
Get-AzureRmContext | select Subscription

Get-AzureRMSubscription -SubscriptionName "****** Test Stg"
Get-azureRmSubscription | where Name -eq "***** Dev Test Stg"
Set-AzureRmContext -SubscriptionId "*************"
Select-AzureRmSubscription -SubscriptionName "Microsoft Azure Enterprise"
Get-AzureRmContext | select Subscription

Non-Interactive Login command:
--------------------------------
Try {
	Get-azureRmSubscription | where Name -eq $subscriptionName
	Select-AzureRmSubscription -SubscriptionName $subscriptionName
	Get-AzureRmContext | select Subscription
} Catch {
	if ($_ -like "*Connect-AzureRmAccount*" -or $_ -like "*valid tenant*") {
		Login-AzureRmAccount
		Get-azureRmSubscription | where Name -eq $subscriptionName
		Select-AzureRmSubscription -SubscriptionName $subscriptionName
		Get-AzureRmContext | select Subscription
	}
}

Disconnect RM Account:
-------------------------
Disconnect-AzureRmAccount


Deploy Command:

$template='D:\Works\Projects\Sanford\ARM-Templates\IotHub\CDB-Template.json'
$parameter='D:\Works\Projects\Sanford\ARM-Templates\IotHub\CDB-Params.json'
$rg='dep-alerting-cat-rg-01'

New-AzureRmResourceGroupDeployment -Name "deptest" -TemplateFile $template -TemplateParameterFile $parameter -ResourceGroupName $rg


-------------------------------------------------------------------------------------------------------
$rg='dev-rg-01'
$template='D:\Works\Projects\CaterP\ARMTemplates-Shukkoor\version-2\INT\ARM-RedisCache.json'
New-AzureRmResourceGroupDeployment -Name "amsintdeployment" -TemplateFile $template  -ResourceGroupName $rg  





New-AzureRmResourceGroupDeployment -ResourceGroupName 'myTempRG' -TemplateFile 'D:\ARMDeployAutomation\App-deployment.json'
New-AzureRmResourceGroupDeployment -ResourceGroupName 'myTempRG' -TemplateFile 'D:\ARMDeployAutomation\App-deployment.json'
New-AzureRmResourceGroupDeployment -ResourceGroupName 'myTempRG' -TemplateFile 'D:\ARMDeployAutomation\FA-deployment.json' -TemplateParameterFile 'D:\ARMDeployAutomation\FA-parameters.json'
========================================================================================================================

New-AzureStorageContainer in  Existing Storage Account:
--------------------------------------------------------
$storageAccountKey0 = (Get-AzureRmStorageAccountKey -Name "spdeviotsa01" -ResourceGroupName "myTempRG").Value[0]
$storageAccountContext = New-AzureStorageContext -StorageAccountName "spdeviotsa01" -StorageAccountKey $storageAccountKey0
New-AzureStorageContainer -Name "blobcontainer1" -Permission Off -Context $storageAccountContext

There are three (3) different options for storage accounts 
Options are
1. General Purpose V2 (GPv2) accounts
2. General Purpose V1 (GPv1) accounts
3.Blob Storage Accounts


INFO: ARM Templates
--------------------
SKU: Standard_LRS, Standard_GRS, Standard_ZRS, Premium_LRS
Access Tier: Hot/Cool/Archive
Kind: BlobStorage, Storage, StorageV2

ARM Template: Storage Account:
------------------------------
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
	"storageAccountType": {
      "type": "string",
      
      "metadata": {
        "description": "Storage Account type"
      }
    },
	"storageName": {
      "type": "string",
	  "metadata": {
        "description": "Storage Account Name"
      }
	 },
	 "storageType": {
		"type": "string",
	  "metadata": {
		"description": "Storage Account Kind"
      }
	 },
	 "BlobAccessTier": {
		"type": "string"
	 },
	 
	
	 "reference_container": {
		"type": "string"
	 },
	  "coldpath_container": {
		"type": "string"
	 },
	 "chkpoint_container": {
		"type": "string"
	 }
	 
  },
  
   "variables": {
      "storageAccountName": "[parameters('storageName')]"
    },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
	  
      "sku": {
          "name": "[parameters('storageAccountType')]"
      },
      "kind": "[parameters('storageType')]", 
      "properties": {
		"accessTier": "[parameters('BlobAccessTier')]"
      },
	  
	  "resources": [
		
		{
			 "name": "[concat('default/', parameters('reference_container'))]",
			"type": "blobServices/containers",
			"apiVersion": "2018-03-01-preview",
			"dependsOn": [
				"[variables('storageAccountName')]"
			]
		},
		{
			 "name": "[concat('default/', parameters('coldpath_container'))]",
			"type": "blobServices/containers",
			"apiVersion": "2018-03-01-preview",
			"dependsOn": [
				"[variables('storageAccountName')]"
			]
		},
		{
			 "name": "[concat('default/', parameters('chkpoint_container'))]",
			"type": "blobServices/containers",
			"apiVersion": "2018-03-01-preview",
			"dependsOn": [
				"[variables('storageAccountName')]"
			]
		}
		
		]
	  
    }
  ],
  "outputs": {
      "storageAccountName": {
          "type": "string",
          "value": "[variables('storageAccountName')]"
      }
  }
}
$$$$$$$$$$$$$$$$$$
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
	"storageName": {
      "value": "aspbilabiiotstorageprod"
    },
	"storageAccountType": {
      "value": "Standard_LRS" 
    },
	 "storageType": {
		"value": "StorageV2"
	 },
	 "BlobAccessTier": {
		"value": "Cool"
	 },
	 
	 
	 "reference_container": {
		"value": "referencedata"
	 },
	 "coldpath_container": {
		"value": "iot-messages-coldpath"
	 },
	 "chkpoint_container": {
		"value": "iothub-eventhub-checkpoint"
	 }
		
  }
}
=============================================================================================================
COSMOS Azure CLI Commands:
----------------------------

PowerShell:
----------------
Login-AzureRmAccount
Get-AzureRmContext | select Subscription
Install-Module -Name AzureRM.profile -RequiredVersion 5.2.0       	
Install-Module -Name AzureRM.Resources
#Install-Module -Name cosmosdb
# $existingCosmosContext = Get-CosmosContext [Create cosmos db context from RGname, cosmos name]


$primaryKey = ConvertTo-SecureString -String '*******************************==' -AsPlainText -Force
$cosmosDbContext = New-CosmosDbContext -Account 'cosmos123' -ResourceGroup 'myresource'
New-CosmosDbDatabase -Context $cosmosDbContext -Id 'amsdb'
$cosmosDbContext = New-CosmosDbContext -Account 'cosmos123' -Database 'amsdb' -ResourceGroup 'myresource'
New-CosmosDbCollection -Context $cosmosDbContext -Id 'alerts' -OfferThroughput 1000
New-CosmosDbCollection -Context $cosmosDbContext -Id 'comingdata' -OfferThroughput 1000




---------------------------------------------------------------------------------------------------
az cosmosdb create 	--name docdb-test --kind GlobalDocumentDB --locations "South Central US"=0 "North Central US"=1 --resource-group mytemptestrg --max-interval 10 --max-staleness-prefix 200 
az cosmosdb database create --name 'docdb-test' --db-name 'docdb-test-database' --resource-group mytemptestrg
az cosmosdb collection create --collection-name 'docdb-test-collection' --name 'docdb-test' --db-name 'docdb-test-database' --resource-group mytemptestrg --throughput 400
az cosmosdb collection update --collection-name 'docdb-test-collection' --name 'docdb-test' --db-name 'docdb-test-database' --resource-group mytemptestrg --throughput 700



#!/bin/bash

# Set variables for the new account, database, and collection
resourceGroupName='mytemptestrg01'
location='eastus'
name='docdb-test'
databaseName='docdb-test-database'
collectionName='docdb-test-collection'
originalThroughput=400 
newThroughput=700

# Create a resource group
az group create \
	--name $resourceGroupName \
	--location $location

# Create a DocumentDB API Cosmos DB account
az cosmosdb create \
	--name $name \
	--kind GlobalDocumentDB \
	--locations "South Central US"=0 "North Central US"=1 \
	--resource-group $resourceGroupName \
	--max-interval 10 \
	--max-staleness-prefix 200 

# Create a database 
az cosmosdb database create \
	--name $name \
	--db-name $databaseName \
	--resource-group $resourceGroupName

# Create a collection
az cosmosdb collection create \
	--collection-name $collectionName \
	--name $name \
	--db-name $databaseName \
	--resource-group $resourceGroupName \
	--throughput $originalThrougput

# Scale throughput
az cosmosdb collection update \
	--collection-name $collectionName \
	--name $name \
	--db-name $databaseName \
	--resource-group $resourceGroupName \
	--throughput $newThroughput




















