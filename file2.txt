File2 by T2
WebApp service template:
{
    "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "hostingPlanName1": "spdeviot-apsp01",      
        "sku": "S2",
        "siteName19": "spdeviot-webapp01",
        "siteLocation": "East US",        
        "workerSize": "1",
        "pricingTier": "Medium"
    },
    "resources": [
        {
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "tier": "Standard",
                "size": "S2",
                "family": "S",
                "name": "[variables('sku')]",
                "capacity": "[variables('workerSize')]"
            },
            "name": "[variables('hostingPlanName1')]",
            "apiVersion": "2014-11-01",
            "location": "[variables('siteLocation')]",
            "tags": {
                "Team": "Sanford Profile",
                "Owner": "Salman",
                "Environment": "DEV"
            },
            "properties": {
                "name": "[variables('hostingPlanName1')]",
                "numberOfWorkers": 1,
                "workerSize": "[variables('pricingTier')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "name": "[variables('siteName1')]",
            "apiVersion": "2014-11-01",
            "location": "[variables('siteLocation')]",
            "tags": {
                "Team": "Sanford Profile",
                "Owner": "Salman",
                "Environment": "DEV"
            },
            "properties": {
                "serverFarm": "[variables('hostingPlanName1')]",
                "siteConfig": {
                    "AlwaysOn": true,
                    "clientAffinityEnabled": false
                }
            },
            "resources": [
                {
                    "type": "config",
                    "name": "web",
                    "apiVersion": "2014-11-01",
                    "properties": {
                        "phpVersion": "5.6",
                        "netFrameworkVersion": "v4.7",
                        "use32BitWorkerProcess": false,
                        "webSocketsEnabled": true,
                        "alwaysOn": true,
                        "requestTracingEnabled": true,
                        "httpLoggingEnabled": true,
                        "logsDirectorySizeLimit": 40,
                        "detailedErrorLoggingEnabled": true,
                        "remoteDebuggingEnabled": true,
                        "remoteDebuggingVersion": "VS2013",
                        "virtualApplications": [
                            {
                                "virtualPath": "/",
                                "physicalPath": "site\\wwwroot"
                            },
                            {
                                "virtualPath": "/MyApp",
                                "physicalPath": "site\\wwwroot"
                            }
                        ],
                        "defaultDocuments": [
                            "index.html",
                            "hostingstart.html"
                        ]
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('siteName1'))]"
                    ]
                },
                {
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion": "2014-11-01",
                    "properties": {
                       
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('siteName1'))]",
                        "[concat('Microsoft.Web/Sites/', variables('siteName1'),'/config/web')]"
                    ]
                },
                {
                    "type": "config",
                    "name": "connectionstrings",
                    "apiVersion": "2014-11-01",
                    "properties": {},
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('siteName1'))]",
                        "[concat('Microsoft.Web/Sites/', variables('siteName1'),'/config/appsettings')]"
                    ]
                },
                {
                    "type": "config",
                    "name": "logs",
                    "apiVersion": "2015-08-01",
                    "properties": {},
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('siteName1'))]",
                        "[concat('Microsoft.Web/Sites/', variables('siteName1'),'/config/connectionstrings')]"
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName1'))]"
            ]
        }
    ]
}
-----***-------
---------------
Function template:
------------------
{
    "$schema": "http://schemas.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appName": {
            "type": "String",
            "metadata": {
                "description": "The name of the function app that you wish to create."
            }
        },
        "appserviceplan_name": {
            "type": "String"
        }
    },
    "variables": {
        "functionAppName": "[parameters('appName')]",
        "hostingPlanName": "[parameters('appserviceplan_name')]",
        "sku": "Standard",
        "workerSize": "Large"
       
    },
    "resources": [
        
        {
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "2015-04-01",
            "location": "[resourceGroup().location]",
            "tags": {
				"Team": "Sanford Profile",
				"Owner": "Salman",
				"Environment": "DEV"
			},
            "properties": {
                "name": "[variables('hostingPlanName')]",              
                "sku": "[variables('sku')]",
                "workerSize": "[variables('workerSize')]",
                "numberOfWorkers": 1

            }
        },
        {
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "name": "[variables('functionAppName')]",
            "apiVersion": "2015-08-01",
            "location": "[resourceGroup().location]",
            "tags": {
				"Team": "Sanford Profile",
				"Owner": "Salman",
				"Environment": "DEV"
			},
            "properties": {
                "name": "[variables('functionAppName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            },
            "resources": [
                {
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion": "2016-03-01",
                    "properties": {
                      
                        "FUNCTIONS_EXTENSION_VERSION": "latest",
                        "command": "deploy.cmd"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
                       
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"


            ]
        }
    ]
}
-----------Function Param------------
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appName": {
            "value": "spdeviot-funapp01"                      
        },
        "appserviceplan_name": {
            "value": "spdeviot-apsp02"
        }
    }
}
============***===============
iothub template:
----------------------------
{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
			"iotHubName": {
			  "type": "string",
			  "minLength": 3,
			  "metadata": {
				"description": "Name of the IoT Hub instance to provision."
			  }
			},
			"skuName": {
			  "type": "string",
			  "allowedValues": [
				"F1",
				"S1",
				"S2"
			  ],
			  "defaultValue": "S1",
			  "metadata": {
				"description": "One of the supported SKUs: F1, S1 or S2"
			  }
			},
			"capacityUnits": {
			  "type": "int",
			  "minValue": 1,
			  "defaultValue": 1,
			  "metadata": {
				"description": "Number of desired IoT Hub units. Restricted to 1 unit for F1. Can be set up to maximum number allowed for subscription."
			  }
			},
			"d2cMessageRetentionInDaysPeriod": {
			  "type": "int",
			  "minValue": 1,
			  "maxValue": 7,
			  "defaultValue": 1,
			  "metadata": {
				"description": "Retention time in days for device-to-cloud messages."
			  }
			},
			"d2cPartitionCount": {
			  "type": "int",
			  "minValue": 2,
			  "defaultValue": 2,
			  "metadata": {
				"description": "Number of desired partitions for device-to-cloud event ingestion."
			  }
			},
			"c2dMessagesTTLAsIso8601": {
			  "type": "string",
			  "defaultValue": "PT1H",
			  "metadata": {
				"description": "Default TTL in ISO_8601 format for cloud-to-device messages. The value can range from PT1M to PT2D (or any other format as per ISO_8601 standards for duration)."
			  }
			},
			"c2dMessagesMaxDeliveryCount": {
			  "type": "int",
			  "minValue": 1,
			  "maxValue": 100,
			  "defaultValue": 10,
			  "metadata": {
				"description": "Maximum delivery count for cloud-to-device messages per-device queues."
			  }
			},
			"c2dFeebackMessagesTTLAsIso8601": {
			  "type": "string",
			  "defaultValue": "PT1H",
			  "metadata": {
				"description": "TTL in ISO_8601 format for service-bound feedback messages. The value can range from PT1M to PT2D (or any other format as per ISO_8601 standards for duration)."
			  }
			},
			"c2dFeedbackMessagesMaxDeliveryCount": {
			  "type": "int",
			  "minValue": 1,
			  "maxValue": 100,
			  "defaultValue": 10,
			  "metadata": {
				"description": "Maximum delivery count for feedback queue."
			  }
			},
			"c2dFeedbackMessagesLockDurationAsIso8601": {
			  "type": "string",
			  "defaultValue": "PT60S",
			  "metadata": {
				"description": "Lock duration in ISO_8601 format for service-bound feedback messages. The value can range from PT5S to PT300S (or any other format as per ISO_8601 standards for duration)."
			  }
			},
			"d2cConsumerGroupName": {
			  "type": "string",
			  "minLength": 3,
			  "defaultValue": "ihtrackercg",
			  "metadata": {
				"description": "Name of device-to-cloud consumer group to provision on the IoT Hub instance."
			  }
			},
			"location": {
			  "type": "string",
			  "defaultValue": "[resourceGroup().location]",
			  "metadata": {
				"description": "Location for all resources."
			  }
			}
  },
  
  
  
  
  "variables": {
    "apiVersion": "2016-02-03",
    "location": "[parameters('location')]"
  },
  
  
  "resources": [
    {
		  "apiVersion": "2016-02-03",
		  "location": "[variables('location')]",
		  "name": "[parameters('iotHubName')]",
		  "tags": {
			"Team": "Sanford Profile",
			"Owner": "Salman",
			"Environment": "DEV"
		  },
		  "properties": {
				"eventHubEndpoints": {
					  "events": {
						"retentionTimeInDays": "[parameters('d2cMessageRetentionInDaysPeriod')]",
						"partitionCount": "[parameters('d2cPartitionCount')]"
					  }
				},
				"cloudToDevice": {
				  "defaultTtlAsIso8601": "[parameters('c2dMessagesTTLAsIso8601')]",
				  "maxDeliveryCount": "[parameters('c2dMessagesMaxDeliveryCount')]",
				  "feedback": {
					"maxDeliveryCount": "[parameters('c2dFeedbackMessagesMaxDeliveryCount')]",
					"ttlAsIso8601": "[parameters('c2dFeebackMessagesTTLAsIso8601')]",
					"lockDurationAsIso8601": "[parameters('c2dFeedbackMessagesLockDurationAsIso8601')]"
				  }
				},
				
				"location": "[parameters('location')]"
			},
		  "sku": {
			"name": "[parameters('skuName')]",
			"capacity": "[parameters('capacityUnits')]"
		  },
		"type": "Microsoft.Devices/IotHubs"
    },
	
	
    {
		"apiVersion": "2016-02-03",
		  "dependsOn": [
			"[concat('Microsoft.Devices/iothubs/', parameters('iotHubName'))]"
		  ],
		"name": "[concat(parameters('iotHubName'), '/events/',parameters('d2cConsumerGroupName'))]",
		"type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups"
    }
  ],
  "outputs": {
    "iotHubKeys": {
      "value": "[listKeys(resourceId('Microsoft.Devices/iotHubs', parameters('iotHubName')), variables('apiVersion'))]",
      "type": "object"
    }
  }
}
--------------xxx-------------------
iothub param
-------------------------
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "iotHubName": { "value": "spdeviot-ih01" },
	
  }
}
===============xxxxxxxxxxxxx============
VM-template:
---------------------------------
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
	
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
	"virtualMachineName":{
		"type": "string"
	},
	"vnetName":{
		"type": "string"
	},
	"subnet":{
		"type": "string"
	},
	"nsgName":{
		"type": "string"
	},
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Nano-Server",
        "2016-Datacenter-with-Containers",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'profilesavm')]",
    "nicName": "[parameters('networkInterface')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "[parameters('subnet')]",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "spdeviot-ip01",
    "vmName": "[parameters('virtualMachineName')]",
    "virtualNetworkName": "[parameters('vnetName')]",
	"networkSecurityGroupName": "[parameters('nsgName')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
        }
      }
    },
	 {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "tcprule",
            "properties": {
              "description": "This is the first rule",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
		  {
            "name": "rdprule",
            "properties": {
              "description": "This is the first rule",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          }
		  
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
	  "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
			  "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
		"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
			"hardwareProfile": {
			  "vmSize": "Standard_A2"
			},
			"osProfile": {
			  "computerName": "[variables('vmName')]",
			  "adminUsername": "[parameters('adminUsername')]",
			  "adminPassword": "[parameters('adminPassword')]"
			},
			"storageProfile": {
				  "imageReference": {
					"publisher": "MicrosoftWindowsServer",
					"offer": "WindowsServer",
					"sku": "[parameters('windowsOSVersion')]",
					"version": "latest"
				  },
				  "osDisk": {
					"createOption": "FromImage"
				  },
				  "dataDisks": [
					{
					  "diskSizeGB": 1023,
					  "lun": 0,
					  "createOption": "Empty"
					}
				  ]
			},
			"networkProfile": {
			  "networkInterfaces": [
				{
				  "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
				}
			  ]
			},
			"diagnosticsProfile": {
			  "bootDiagnostics": {
				"enabled": true,
				"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
			  }
			}
      }
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    }
  }
}
=----------------xxxxxx----------------
VM Param
-----------------
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
	"virtualMachineName":{
		"value": "sadeviotvm"
	},
	"vnetName":{
		"value": "spdeviot-vnet01"
	},
	"subnet":{
		"value": "profilesubnet"
	},
	"networkInterface":{
		"value": "spdeviot-nic01"
	},
	"nsgName":{
		"value": "spdeviot-nsg01"
	},
	"dnsLabelPrefix": {
      "value": "sonarqubeserver"
    },
    "adminUsername": {
      "value": "sonarvmuser"
    },
    "adminPassword": {
      "value": "Sonarvmp@sswd1"
    },
    
  }
}
===============xxxxxx===============
JnJ VM Template:
-------------------
{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualMachineName": {
      "type": "string"
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
	"VMachineSize":{
		"type": "string"
	},
	"addressPrefix":{
		"type": "string"
	},
	"subnet_name":{
		"type": "string"
	},
	"subnet_prefix":{
		"type": "string"
	},
	"public_IPaddress_type":{
		"type": "string"
	},
	"public_IPaddress_sku":{
		"type": "string"
	},
		
  },
  "variables": {
    "safeVmName": "[toLower(replace(parameters('virtualMachineName'), '-', ''))]",
    "virtualMachineSize": "[parameters('VMachineSize')]",
    "virtualNetworkName": "[concat(variables('safeVmName'), '-vnet')]",
    "networkInterfaceName": "[concat(variables('safeVmName'), '-neti')]",
    "networkSecurityGroupName": "[concat(parameters('virtualMachineName'), '-nsg')]",
    "diagnosticsStorageAccountName": "[concat(variables('safeVmName'), 'diag')]",
    "diagnosticsStorageAccountType": "Standard_LRS",
    "diagnosticsStorageAccountId": "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "addressPrefix": "[parameters('address_Prefix')]",
    "subnetName": "[parameters('subnet_name')]",
    "subnetPrefix": "[parameters('subnet_prefix')]",
    "publicIpAddressName": "[concat(parameters('virtualMachineName'), '-ip')]",
    "publicIpAddressType": "[parameters('public_IPaddress_type')]",
    "publicIpAddressSku": "[parameters('public_IPaddress_sku')]",
    "dnsNamePrefix": "[toLower(concat(parameters('virtualMachineName'), '-', take(guid(resourceGroup().id), 8)))]",
    "autoShutdownStatus": "Enabled",
    "autoShutdownTime": "19:00",
    "autoShutdownTimeZone": "UTC",
    "autoShutdownNotificationStatus": "Disabled",
    "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
  },
  "resources": [
    {
      "name": "[parameters('virtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[parameters('virtualMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": "true"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('diagnosticsStorageAccountName')), '2015-06-15').primaryEndpoints['blob']]"
          }
        }
      },
      "resources": [
        {
          "type": "extensions",
          "name": "CustomScriptExtension",
          "apiVersion": "2015-06-15",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('virtualMachineName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.8",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "https://raw.githubusercontent.com/justcla/ASPNet-VM/master/setup.ps1"
              ],
              "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File setup.ps1"
            }
          }
        }
      ]
    },
    {
      "name": "[concat('shutdown-computevm-', parameters('virtualMachineName'))]",
      "type": "Microsoft.DevTestLab/schedules",
      "apiVersion": "2017-04-26-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "status": "[variables('autoShutdownStatus')]",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "[variables('autoShutdownTime')]"
        },
        "timeZoneId": "[variables('autoShutdownTimeZone')]",
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]",
        "notificationSettings": {
          "status": "[variables('autoShutdownNotificationStatus')]",
          "timeInMinutes": "30"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('virtualMachineName'))]"
      ]
    },
    {
      "name": "[variables('diagnosticsStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('diagnosticsStorageAccountType')]"
      }
    },
    {
      "name": "[variables('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2016-12-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('networkInterfaceName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2016-09-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "name": "[variables('publicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2017-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIpAllocationMethod": "[variables('publicIpAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNamePrefix')]",
          "fqdn": "[concat(variables('dnsNamePrefix'), resourceGroup().location, '.cloudapp.azure.com')]"
        }
      },
      "sku": {
        "name": "[variables('publicIpAddressSku')]"
      }
    },
    {
      "name": "[variables('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-rdp",
            "properties": {
              "priority": 1000,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389"
            }
          },
          {
            "name": "http",
            "properties": {
              "priority": 100,
              "protocol": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80"
            }
          },
          {
            "name": "WebDeploy",
            "properties": {
              "priority": 1010,
              "protocol": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8172"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}
----------------
JnJ VM Param
-------------------
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
  
	"virtualMachineName": {
      "value": "ASPIOTDEV-prod"
    },
    "adminUsername": {
      "value": "iotjnjadminstrator"
    },
    "adminPassword": {
      "value": "IoTAdmin@123"
    },
	"VMachineSize":{
		"value": "Standard_DS1_v2"
	},
	"address_Prefix":{
		"value": "10.0.5.0/24"
	},
	"subnet_name":{
		"value": "default"
	},
	"subnet_prefix":{
		"value": "10.0.5.0/24"
	},
	"public_IPaddress_type":{
		"value": "Dynamic"
	},
	"public_IPaddress_sku":{
		"value": "Basic"
	},
  }
}
